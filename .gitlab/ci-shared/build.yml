variables:
  INFRASTRUCTURE_TAG:
    description: Computer architecture and supported instruction sets
    options:
      - amd64
      - amd64-avx2
      - amd64-avx2-avx512
      - arm64
      - on-prem-amd64
      - on-prem-arm64
      - aws-spot-amd64
      - aws-spot-arm64
    value: "amd64-avx2"
  OS:
    description: Operating system
    options:
      - "ubuntu-24.10"
      - "ubuntu-24.04"
      - "ubuntu-22.04"
      - "debian-12"
      - "debian-11"
      - "archlinux-latest"
      - "rhel-8"
    value: "ubuntu-24.04"
  COMPILER:
    description: Compiler to use
    options:
      - "gcc"
      - "clang"
    value: "gcc"
  BUILD_ARGS:
    description: It will be passed to cmake
    value: ""
  UHD_VERSION:
    description: must be one version supported in the specified OS
    value: ""
  DPDK_VERSION:
    description: must be one version supported in the specified OS
    value: ""
  TEST_MODE:
    description: Run tests with labels matching regular expression. "none" won't run any test at all.
    value: "default"

.build_and_unit_template:
  image: ${CR_REGISTRY_URI}/srsgnb/builder-${OS}:${DOCKER_BUILDER_VERSION}
  variables:
    CMAKE_BUILD_TYPE: "" # Empty for cmake default
    ASSERT_LEVEL: "" # Empty for cmake default
    ENABLE_EXPORT: "" # Empty for cmake default
    ENABLE_BACKWARD: "" # Empty for cmake default
    ENABLE_FFTW: "" # Empty for cmake default
    ENABLE_MKL: "False" # Empty for cmake default
    ENABLE_ARMPL: "False" # Empty for cmake default
    ENABLE_UHD: "" # Empty for cmake default
    ENABLE_DPDK: "" # Empty for cmake default
    ENABLE_ZEROMQ: "" # Empty for cmake default
    ENABLE_ASAN: "" # Empty for cmake default
    ENABLE_TSAN: "" # Empty for cmake default
    ENABLE_GCOV: "" # Empty for cmake default
    ENABLE_UBSAN: "" # Empty for cmake default
    ENABLE_UBSAN_MIN: "" # Empty for cmake default
    ENABLE_RTSAN: "" # Empty for cmake default
    ENABLE_WERROR: "" # Empty for cmake default
    ENABLE_PLUGINS: "" # Empty for cmake default
    FORCE_DEBUG_INFO: "" # Empty for cmake default
    MARCH: "" # Empty for cmake default
    MTUNE: "" # Empty for cmake default
    SRS_TARGET: "" # Empty for cmake default
    # CACHE
    CCACHE_MAXSIZE: 3G
    # TEST
    TEST_EXECUTION_TIMEOUT: 0
    # CI
    TRANSFER_METER_FREQUENCY: 5s
    ARTIFACT_COMPRESSION_LEVEL: slowest
    CACHE_COMPRESSION_LEVEL: slowest
    CACHE_REQUEST_TIMEOUT: 5 # minutes - 10 by default
    # K8
    KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
    KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
    KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
    KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "40G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "40G"
  tags:
    - ${INFRASTRUCTURE_TAG}
  before_script:
    - |
      for var in \
        CMAKE_BUILD_TYPE ASSERT_LEVEL ENABLE_EXPORT ENABLE_BACKWARD \
        ENABLE_FFTW ENABLE_MKL ENABLE_ARMPL \
        ENABLE_UHD ENABLE_DPDK ENABLE_ZEROMQ \
        ENABLE_ASAN ENABLE_TSAN ENABLE_GCOV \
        ENABLE_UBSAN ENABLE_UBSAN_MIN ENABLE_RTSAN \
        ENABLE_WERROR ENABLE_PLUGINS FORCE_DEBUG_INFO \
        MARCH MTUNE \
      ; do
        if [ -n "${!var}" ]; then
          BUILD_ARGS="-D${var}=${!var} ${BUILD_ARGS}"
        fi
      done
      if [[ $TEST_MODE = "none" ]]; then
        BUILD_ARGS="${BUILD_ARGS} -DBUILD_TESTING=False"
      fi

      BUILD_CMD="${BUILD_ARGS}"
      if [ -n "${DPDK_VERSION}" ]; then
        BUILD_CMD="-d ${DPDK_VERSION} ${BUILD_CMD}"
        export LD_LIBRARY_PATH=/opt/dpdk/${DPDK_VERSION}/lib/x86_64-linux-gnu/:/opt/dpdk/${DPDK_VERSION}/lib/aarch64-linux-gnu/:${LD_LIBRARY_PATH}
      fi
      if [ -n "${UHD_VERSION}" ]; then
        BUILD_CMD="-u ${UHD_VERSION} ${BUILD_CMD}"
        export LD_LIBRARY_PATH=/opt/uhd/${UHD_VERSION}/lib:${LD_LIBRARY_PATH}
      fi
      if [ -n "${ENABLE_ARMPL}" ]; then
        if ARMPL_DIR=$(ls -d /opt/arm/armpl_* 2>/dev/null); then
            export LD_LIBRARY_PATH=${ARMPL_DIR}/lib:${LD_LIBRARY_PATH}
        fi
      fi
      if [ -n "${COMPILER}" ]; then
        BUILD_CMD="-c ${COMPILER} ${BUILD_CMD}"
      fi
    - |
      case $TEST_MODE in
        valgrind)
          G_DEBUG=gc-friendly G_SLICE=always-malloc
          # Default timeout per test is 1500 (25 min)
          export CTEST_TIMEOUT=3600
          export CTEST_TEST_TIMEOUT=${CTEST_TIMEOUT}
          CTEST_ARGS="-T memcheck -LE NO_MEMCHECK --timeout ${CTEST_TIMEOUT}"
          ;;
        default|coverage)
          CTEST_ARGS=""
          ;;
        *)
          CTEST_ARGS="-L $TEST_MODE"
          ;;
      esac
    - |
      echo "INFRASTRUCTURE_TAG=${INFRASTRUCTURE_TAG}"
      echo "OS=${OS}"
      echo "SRS_TARGET=${SRS_TARGET}"
      echo "COMPILER=${COMPILER}"
      echo "UHD_VERSION=${UHD_VERSION}"
      echo "DPDK_VERSION=${DPDK_VERSION}"
      echo "BUILD_ARGS=${BUILD_ARGS}"
      echo "TEST_MODE=${TEST_MODE}"
    - |
      build_srsran() {
        set -x
        builder.sh -m "-j${KUBERNETES_CPU_REQUEST} ${SRS_TARGET}" ${BUILD_CMD} ${SRSRANDIR}
        { set +x; } 2>/dev/null
      }
    - |
      launch_tests_srsran() {
        cd ${SRSRANDIR}/build
        echo "Using LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        set -x
        ctest -j${KUBERNETES_CPU_REQUEST} --schedule-random --output-on-failure --output-junit xunit.xml $CTEST_ARGS
        { set +x; } 2>/dev/null
        grep -l "ERROR SUMMARY: 0 errors" Testing/Temporary/MemoryChecker.*.log | xargs rm || true
      }
