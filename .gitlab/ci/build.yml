#
# Copyright 2013-2025 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/srsran_project_packaging
    ref: "10"
    file: .gitlab/ci-shared/package.yml
  - local: .gitlab/ci-shared/build.yml

variables:
  SRSRANDIR: ${CI_PROJECT_DIR}

################
# Build caches #
################

.cache_build_set: &cache_build_set
  - key: ${OS}-${COMPILER}-${CMAKE_BUILD_TYPE}-${MARCH}
    paths: [ccache]
    policy: push

.cache_build_get: &cache_build_get
  - key: ${OS}-${COMPILER}-${CMAKE_BUILD_TYPE}-${MARCH}
    paths: [ccache]
    policy: pull-push

#################
# Template jobs #
#################

# Base job

.build_and_unit:
  extends: .build_and_unit_template
  stage: build and unit tests
  needs:
    - job: builder version
      optional: false
      artifacts: true
    - job: trigger builder
      optional: true
      artifacts: false
    - job: get plugin commit
      optional: true
      artifacts: true
  variables:
    PLUGIN_INDEX_ARRAY: "0" # Space separated list of indexes of plugins to build. f.e. "0 1 2"
  script:
    - &srs_functions |
      build_srsgnb() {
        target="$1"

        start_time=$(date +%s)
        if [ -e "/usr/local/bin/ram_reporter.py" ]; then
          /usr/local/builder_tools/bin/python3 /usr/local/bin/ram_reporter.py ${CI_PROJECT_DIR}/ram_usage.txt &
          ram_reporter_pid=$!
        fi

        build_srsran
        if [[ -n "$OUTPUT_FINGERPRINT" ]]; then
          echo "Storing fingerprints of all executables to $OUTPUT_FINGERPRINT"
          cd build
          /usr/local/builder_tools/bin/python /usr/local/bin/changed_tests.py -b . -o "../$OUTPUT_FINGERPRINT"
          cd ..
        fi

        end_time=$(date +%s)
        execution_time=$((end_time - start_time))
        echo "Build time is: $execution_time seconds"

        export metric_prefix=""
        if [[ $ON_MR == "true" ]]; then metric_prefix="_pr"; fi

        if [ -e "${CI_PROJECT_DIR}/ram_usage.txt" ]; then
          ram_usage=$(cat ${CI_PROJECT_DIR}/ram_usage.txt)
          echo "RAM usage is: $ram_usage GB"
          kill $ram_reporter_pid
          echo "ram_usage${metric_prefix},pipeline=${CI_PIPELINE_ID},os=${OS} value=${ram_usage}" >> ${CI_PROJECT_DIR}/build/build_time_metrics.txt
        fi
        echo "build_time${metric_prefix},pipeline=${CI_PIPELINE_ID},os=${OS} value=${execution_time}" >> ${CI_PROJECT_DIR}/build/build_time_metrics.txt
      }

      launch_tests() {
        cd ${CI_PROJECT_DIR}/build
        if [ -n "${FINGERPRINT}" ]; then
          echo "Searching for changed tests"
          CTEST_SUBSET=$(/usr/local/builder_tools/bin/python /usr/local/bin/changed_tests.py -b . -i "../${FINGERPRINT}" -d md5)
          if [ -n "${CTEST_SUBSET}" ]; then
            echo "Tests with changed fingerprint: ${CTEST_SUBSET}"
            CTEST_SUBSET_CMD="-I 0,0,0,${CTEST_SUBSET}"
          else
            echo "No tests changed"
            ret=0
            exit $ret
          fi
        fi
        echo "Using LD_LIBRARY_PATH=$LD_LIBRARY_PATH"
        CTEST_CMD="ctest -j${KUBERNETES_CPU_REQUEST} ${CTEST_SUBSET_CMD} $CTEST_ARGS --schedule-random --output-on-failure --output-junit xunit.xml"
        echo "+ ${CTEST_CMD}"

        status_file=$(mktemp)
        timeout ${TEST_EXECUTION_TIMEOUT} \
          bash -c "${CTEST_CMD}; echo \$? > ${status_file}" \
          && ret=$(cat ${status_file}) || ret=124

        if [[ $TEST_MODE = "coverage" ]]; then
          common_options="-j${KUBERNETES_CPU_REQUEST} \
            --exclude-unreachable-branches \
            --gcov-ignore-parse-errors=negative_hits.warn_once_per_file \
            --exclude=${CI_PROJECT_DIR}/tests/* \
            --exclude=${CI_PROJECT_DIR}/apps/examples/* \
            --exclude=${CI_PROJECT_DIR}/external/* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/e1ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/e2ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/f1ap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/ngap/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/nrppa/.* \
            --exclude=${CI_PROJECT_DIR}/include/srsran/asn1/rrc_nr/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/e1ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/e2ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/f1ap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/ngap/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/nrppa/.* \
            --exclude=${CI_PROJECT_DIR}/lib/asn1/rrc_nr/.* \
            --exclude=${CI_PROJECT_DIR}/plugins/.*/include/srsran/asn1/nrppa/.* \
            --exclude=${CI_PROJECT_DIR}/plugins/.*/lib/asn1/nrppa/.* \
            --exclude-lines-by-pattern \".*srsran_assert.*|.*srsran_sanity_check.*\" \
            --root=${CI_PROJECT_DIR} \
            --gcov-ignore-parse-errors=all \
            --merge-mode-functions=merge-use-line-min"

          echo "+ gcovr: Coverage generation"
          if ! output=$(gcovr $common_options --keep 2>&1); then
            echo "gcovr FAILED!"
            echo "$output"
            ret=1
          fi
          if ! output=$(gcovr $common_options --xml --print-summary --use-gcov-files -o coverage.xml 2>&1); then
            echo "gcovr FAILED!"
            echo "$output"
            ret=1
          fi

          filesize=$(stat -c%s coverage.xml)
          maxsize=$((10*1204*1024))
          (( filesize > maxsize )) && echo "coverage.xml is greater than 10MB, over gitlab limit" && exit 1
        fi

        if [ $ret -eq 124 ]; then
          echo "The test execution exceeded the maximum allowed time !!!!"
        fi

        exit $ret
      }

      if [[ $CI_DISABLE_PLUGINS != "True" ]]; then
        PLUGIN_PATH_ARRAY=()
        PLUGIN_REPO_ARRAY=()
        PLUGIN_REF_ARRAY=()
        while IFS='|' read -r path repo ref; do
            PLUGIN_PATH_ARRAY+=("$path")
            PLUGIN_REPO_ARRAY+=("$repo")
            PLUGIN_REF_ARRAY+=("$ref")
        done < <(grep -v '^#' "$PLUGINS_DATA_FILE")

        for index in $PLUGIN_INDEX_ARRAY; do
            PLUGIN_PATH="${PLUGIN_PATH_ARRAY[$index]}"
            PLUGIN_REPO="${PLUGIN_REPO_ARRAY[$index]}"
            PLUGIN_REF="${PLUGIN_REF_ARRAY[$index]}"
            PLUGIN_REF=$(eval echo $PLUGIN_REF)
            
            if [[ ! -f "$PLUGIN_PATH" ]]; then
              echo "#############################"
              echo "#### $PLUGIN_PATH checkout ####"
              echo "#############################"
              git submodule add https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_SHELL_SSH_HOST}/${PLUGIN_REPO}.git plugins/${PLUGIN_PATH}
              cd plugins/${PLUGIN_PATH}
              git fetch --depth=1 origin ${PLUGIN_REF} > /dev/null
              git config advice.detachedHead false
              git checkout ${PLUGIN_REF}
              cd ${CI_PROJECT_DIR}
            fi
        done
      fi
    - build_srsgnb
    - launch_tests
  timeout: 6h

.build_artifacts:
  after_script: &build_after_script
    - mv ${CI_PROJECT_DIR}/build/coverage.xml      ${CI_PROJECT_DIR}/${CI_JOB_ID}_coverage.xml            || true
    - |
      find ${CI_PROJECT_DIR}/build -name "gnb" -type f -executable -exec mv {} /tmp/gnb \;
      find ${CI_PROJECT_DIR}/build -name "srscu" -type f -executable -exec mv {} /tmp/srscu \;
      find ${CI_PROJECT_DIR}/build -name "srsdu" -type f -executable -exec mv {} /tmp/srsdu \;
      cd build
      make clean
      mv /tmp/gnb ${CI_PROJECT_DIR}/build/apps/gnb/gnb
      mv /tmp/srscu ${CI_PROJECT_DIR}/build/apps/cu/srscu
      mv /tmp/srsdu ${CI_PROJECT_DIR}/build/apps/du/srsdu
  artifacts: &build_artifacts
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: ${CI_JOB_ID}_coverage.xml
    paths:
      - ${CI_JOB_ID}_coverage.xml
      - build/
      - build_time_metrics.txt
    expire_in: 10 minutes

# Basic builds (MR and update cache on Nightly)

.smoke release:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: coverage
    ENABLE_GCOV: "True"
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke relwithdeb:
  extends: .build_and_unit
  script:
    - *srs_functions
    - build_srsgnb
    - |
      rm ${CI_PROJECT_DIR}/build/apps/gnb_split_7_2/gnb
      rm ${CI_PROJECT_DIR}/build/apps/gnb_split_8/gnb
      rm ${CI_PROJECT_DIR}/build/apps/gnb_split_6/gnb
    - launch_tests
  variables:
    OS: ubuntu-24.04
    COMPILER: clang
    CMAKE_BUILD_TYPE: RelWithDebInfo
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: default
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke tsan:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.10
    COMPILER: clang
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    ENABLE_TSAN: "True"
    TEST_MODE: tsan
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke archlinux:
  extends: .build_and_unit
  variables:
    OS: archlinux-latest
    ENABLE_WERROR: "False"
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: default
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke dpdk:
  extends: .build_and_unit
  variables:
    OS: ubuntu-22.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    DPDK_VERSION: "23.11.1_avx2"
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke valgrind:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: valgrind
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

.smoke avx512:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: default
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512

.smoke arm:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: default
    MARCH: armv8-a
    INFRASTRUCTURE_TAG: arm64

.smoke arm neon:
  extends: .build_and_unit
  variables:
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    ASSERT_LEVEL: PARANOID
    ENABLE_FFTW: "True"
    TEST_MODE: default
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64

# Combinations to use in schedules matrix

.combinations: &basic_combinations
  COMPILER: [gcc, clang]
  CMAKE_BUILD_TYPE: [Release, RelWithDebInfo, Debug]
  ASSERT_LEVEL: [MINIMAL, NORMAL, PARANOID]

######
# MR #
######

# Smoke builds in PR: with or without cache

smoke relwithdeb cached:
  extends: .smoke relwithdeb
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
  cache:
    - *cache_build_get

smoke tsan cached:
  extends: .smoke tsan
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke archlinux cached:
  extends: .smoke archlinux
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke dpdk cached:
  extends: .smoke dpdk
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

.infra_path_changes:
  - changes: &instruction_set_changes
      paths:
        - include/srsran/phy/**/*
        - lib/phy/**/*
        - tests/unittests/phy/**/*

smoke avx512 cached:
  extends: .smoke avx512
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke arm cached:
  extends: .smoke arm
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke arm neon cached:
  extends: .smoke arm neon
  stage: manual
  timeout: 1 hour
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
      changes:
        <<: *instruction_set_changes
    - if: $ON_MR
      changes:
        <<: *instruction_set_changes
      when: manual
      allow_failure: false
  cache:
    - *cache_build_get

smoke relwithdeb clean:
  extends: .smoke relwithdeb
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts

smoke tsan clean:
  extends: .smoke tsan
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/

smoke archlinux clean:
  extends: .smoke archlinux
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/

smoke dpdk clean:
  extends: .smoke dpdk
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/

smoke avx512 clean:
  extends: .smoke avx512
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      changes:
        <<: *instruction_set_changes

smoke arm clean:
  extends: .smoke arm
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      changes:
        <<: *instruction_set_changes

smoke arm neon clean:
  extends: .smoke arm neon
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      changes:
        <<: *instruction_set_changes

# Intermediate commits

intermediate commits cached:
  extends: .smoke release
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/
      when: never
    - if: $ON_MR
  timeout: 2 hours
  variables:
    CI_DISABLE_PLUGINS: "True"
  script:
    - *srs_functions
    - git config advice.detachedHead false
    - git fetch origin --depth=20 $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
    - |
      for rev in $(git rev-list --reverse origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME..origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME)
      do
        echo "##################################################"
        echo "#### $rev ####"
        echo "##################################################"
        git checkout $rev
        build_srsgnb
      done
    - launch_tests
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
  cache:
    - *cache_build_get

valgrind changed tests:
  extends: .smoke valgrind
  stage: manual
  allow_failure:
    exit_codes: 124 # timeout command's exit code when the time is reached
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-memcheck/
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: true
  variables:
    CLEAN_BUILD: "False"
    FINGERPRINT: "fingerprints.csv"
    TEST_EXECUTION_TIMEOUT: 20m
  script:
    - *srs_functions
    - |
      PLUGIN_PATH="${PLUGIN_PATH_ARRAY[0]}"
      PLUGIN_REF="${PLUGIN_REF_ARRAY[0]}"
      PLUGIN_REF=$(eval echo $PLUGIN_REF)
      REPO_PLUGIN_COMMIT_SHA=$(cat .gitlab/ci/plugin_version.txt)
    - git config advice.detachedHead false
    - git fetch origin $CI_MERGE_REQUEST_TARGET_BRANCH_NAME $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME --depth 40
    - |
      FORK_POINT=$(git merge-base origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME origin/$CI_MERGE_REQUEST_TARGET_BRANCH_NAME)
      echo "#############################################################################################"
      echo "#### $FORK_POINT | $REPO_PLUGIN_COMMIT_SHA ####"
      echo "#############################################################################################"
      git checkout $FORK_POINT
      cd plugins/${PLUGIN_PATH}
      git fetch origin ${REPO_PLUGIN_COMMIT_SHA} > /dev/null
      git checkout ${REPO_PLUGIN_COMMIT_SHA}
      cd ${CI_PROJECT_DIR}
      OUTPUT_FINGERPRINT="${FINGERPRINT}"
      build_srsgnb
      OUTPUT_FINGERPRINT=""
    - |
      echo "#############################################################################################"
      echo "#### $CI_COMMIT_SHA | $PLUGIN_REF ####"
      echo "#############################################################################################"
      git checkout origin/$CI_MERGE_REQUEST_SOURCE_BRANCH_NAME
      cd plugins/${PLUGIN_PATH}
      git checkout ${PLUGIN_REF}
      cd ${CI_PROJECT_DIR}      
      build_srsgnb
    - echo "This test execution has a timeout of ${TEST_EXECUTION_TIMEOUT}. If the execution excess that timer, the job will be marked as allowed_to_fail. This will avoid the job to have a huge duration in a MR pipeline."
    - launch_tests
  cache:
    - *cache_build_get
  artifacts: &valgrind_artifacts
    when: on_failure
    paths:
      - build/Testing/Temporary
    expire_in: 1 day

intermediate commits clean:
  extends: intermediate commits cached
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-cache/

# Target branch is a release branch

load build env for release branch:
  stage: ci
  image: ubuntu:24.04
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  script:
    - cat .gitlab/ci/release_build.env
  artifacts:
    reports:
      dotenv: .gitlab/ci/release_build.env

build on release branch:
  extends: .build_and_unit
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
  variables:
    ENABLE_MKL: # default
    ENABLE_ARMPL: # default
    PLUGIN_INDEX_ARRAY: ""
  tags: ["amd64-avx2"]
  needs:
    - job: builder version
      artifacts: true
    - job: load build env for release branch
      artifacts: true

#################
# Build Nightly #
#################

check builders ubuntu versions:
  extends: .check image exists for all supported ubuntu versions
  stage: static
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 15 minutes
  variables:
    VERSIONS_TO_IGNORE: "20.04"
  script:
    - check_if_image_exists ${CR_REGISTRY_URI}/srsgnb/builder-ubuntu- :${DOCKER_BUILDER_VERSION}

# Update cache for MR jobs

smoke release update cache:
  extends: .smoke release
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  after_script:
    - *build_after_script
  cache:
    - *cache_build_set
  artifacts:
    <<: *build_artifacts
    expire_in: 3 day

smoke relwithdeb update cache:
  extends: .smoke relwithdeb
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke tsan update cache:
  extends: .smoke tsan
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  interruptible: false
  retry: 2
  cache:
    - *cache_build_set

smoke archlinux update cache:
  extends: .smoke archlinux
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke dpdk update cache:
  extends: .smoke dpdk
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke valgrind update cache:
  extends: .smoke valgrind
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  interruptible: false
  retry: 2
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    when: on_failure
    expire_in: 1 day
  cache:
    - *cache_build_set

smoke avx512 update cache:
  extends: .smoke avx512
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  interruptible: false
  retry: 2
  cache:
    - *cache_build_set

smoke arm update cache:
  extends: .smoke arm
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke arm neon update cache:
  extends: .smoke arm neon
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 45 minutes
  retry: 2
  interruptible: false
  cache:
    - *cache_build_set

smoke asan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 45 minutes
  variables:
    OS: ubuntu-24.04
    COMPILER: clang
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_ASAN: "True"
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

smoke rtsan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 45 minutes
  variables:
    OS: ubuntu-24.04-rtsan
    COMPILER: clang
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_RTSAN: "True"
    ENABLE_WERROR: "False"
    TEST_MODE: rtsan
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2

# Packaging

package:
  extends: .deb-package
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests OpenSource/
      when: delayed
      start_in: 45 minutes
  variables: &package_variables
    PROJECT_NAME: srsran-project
    RELEASE_VERSION: "99.9"
    KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
    KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
    KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
    KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
    DEB_BUILD_OPTIONS: parallel=${KUBERNETES_CPU_LIMIT}
    MAKEFLAGS: -j${KUBERNETES_CPU_LIMIT}
    extraopts: -DMARCH=x86-64-v3
  tags: [amd64-avx2]
  parallel:
    matrix:
      - OS_VERSION: "22.04"
      - OS_VERSION: "24.04"
      - OS_VERSION: "24.10"
      - OS_VERSION: "25.04"
  needs: []

install-package:
  extends: .deb-install
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests OpenSource/
  variables:
    PROJECT_NAME: srsran-project
    RELEASE_VERSION: "99.9"
  tags: [amd64-avx2]
  script:
    - gnb --version
  parallel:
    matrix:
      - OS_VERSION: "22.04"
      - OS_VERSION: "24.04"
      - OS_VERSION: "24.10"
      - OS_VERSION: "25.04"
  needs:
    - package

check package ubuntu versions:
  extends: .check packaging ubuntu images
  stage: static
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 15 minutes

# Validate export on, enabled for test vector generation

export on amd64:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 75 minutes
  interruptible: false
  variables:
    COMPILER: gcc
    TEST_MODE: none
    ENABLE_EXPORT: "True"
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04, ubuntu-22.04]
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04, ubuntu-22.04]
        MARCH: x86-64-v3

export on amd64 avx512:
  extends: export on amd64
  variables:
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04, ubuntu-22.04]
        MARCH: x86-64-v4

# Build + unit tests combinations

ubuntu-25.04 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 300 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.10 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 105 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.04 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 135 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.04 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 165 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-22.04 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 195 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations

rhel-8 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 225 minutes
  interruptible: false
  variables:
    OS: rhel-8
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "50G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "50G"
  parallel:
    matrix:
      - <<: *basic_combinations

# Basic ARM NO_ISA / NEON

ubuntu-24.04 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 75 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_ARMPL: "True"

# Basic DPDK

ubuntu dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 260 minutes
  interruptible: false
  variables:
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    ASSERT_LEVEL: PARANOID
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - OS: ubuntu-25.04
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["24.11.1_avx2"]
      - OS: ubuntu-24.10
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["23.11.1_avx2", "24.11.1_avx2"]
      - OS: ubuntu-24.04
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["23.11.1_avx2", "24.11.1_avx2"]
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2", "24.11.1_avx2"]

# Nightly Sanitizers

ubsan avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: delayed
      start_in: 45 minutes
  variables:
    OS: ubuntu-25.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_UBSAN: "True"
    TEST_MODE: default
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2-docker
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "60G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "60G"
  timeout: 2 hours

###################
# Alternative OSs #
###################
archlinux amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
  interruptible: false
  variables:
    OS: archlinux-latest
    ENABLE_WERROR: "False"
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations

archlinux amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: archlinux-latest
    ENABLE_WERROR: "False"
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations

archlinux amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
  interruptible: false
  variables:
    OS: archlinux-latest
    ENABLE_WERROR: "False"
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations

debian 12 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  variables:
    OS: debian-12
    ENABLE_WERROR: "False"
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations

debian 12 amd64 avx2:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 90 minutes
  interruptible: false
  variables:
    OS: debian-12
    ENABLE_WERROR: "False"
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations

debian 12 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: debian-12
    ENABLE_WERROR: "False"
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations

##########
# Weekly #
##########

# Sanitizers

.weekly sanitizers:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  interruptible: false
  variables:
    ASSERT_LEVEL: PARANOID
    CMAKE_BUILD_TYPE: Debug
  artifacts:
    <<: *valgrind_artifacts

sanitizers amd64 native:
  extends: .weekly sanitizers
  variables:
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-22.04]
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      # Valgrind doesn't support AVX512 instruction set
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: ubsan
        COMPILER: [gcc, clang]
        ENABLE_UBSAN: "True"
        TEST_MODE: default
        INFRASTRUCTURE_TAG: amd64-docker
        KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "60G"
        KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "60G"

sanitizers amd64 avx2:
  extends: .weekly sanitizers
  variables:
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: ubuntu-22.04
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: valgrind
        COMPILER: gcc
        TEST_MODE: valgrind
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: ubsan
        COMPILER: [gcc, clang]
        ENABLE_UBSAN: "True"
        TEST_MODE: default
        INFRASTRUCTURE_TAG: amd64-avx2-docker
        KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "60G"
        KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "60G"

sanitizers amd64 avx512:
  extends: .weekly sanitizers
  variables:
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: ubuntu-22.04
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      # Valgrind doesn't support AVX512 instruction set
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: ubsan
        COMPILER: [gcc, clang]
        ENABLE_UBSAN: "True"
        TEST_MODE: default
        INFRASTRUCTURE_TAG: amd64-avx2-avx512-docker
        KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "60G"
        KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "60G"

sanitizers arm native:
  extends: .weekly sanitizers
  variables:
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      # ubuntu-22.04 disabled due to https://github.com/google/sanitizers/issues/1259#issuecomment-642312392
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: tsan
        COMPILER: [gcc, clang]
        ENABLE_TSAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-22.04]
        SANITIZER: asan
        COMPILER: [gcc, clang]
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: asan
        COMPILER: clang
        ENABLE_ASAN: "True"
        TEST_MODE: default
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: valgrind
        COMPILER: gcc
        TEST_MODE: valgrind
      - OS: [ubuntu-25.04, ubuntu-24.10, ubuntu-24.04]
        SANITIZER: ubsan
        COMPILER: [gcc, clang]
        ENABLE_UBSAN: "True"
        TEST_MODE: default
        INFRASTRUCTURE_TAG: arm64-docker
        KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "60G"
        KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "60G"

sanitizers arm neon:
  extends: sanitizers arm native
  variables:
    MARCH: armv8.2-a+crypto+fp16+dotprod

# UHD Alternatives

build uhd alt:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
  interruptible: false
  variables:
    TEST_MODE: none
    ASSERT_LEVEL: PARANOID
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - OS: [ubuntu-25.04, ubuntu-24.10]
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.8.0.0", "4.7.0.0"]
      - OS: ubuntu-24.04
        COMPILER: [gcc, clang]
        UHD_VERSION: ["4.8.0.0", "4.7.0.0", "4.6.0.0"]
      - OS: ubuntu-22.04
        COMPILER: [gcc, clang]
        UHD_VERSION:
          ["4.8.0.0", "4.7.0.0", "4.6.0.0", "4.4.0.0", "4.3.0.0", "4.1.0.5"]

# Build + unit tests combinations

ubuntu-25.04 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 430 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-25.04 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 430 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-25.04 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 430 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-25.04 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 430 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.10 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.10 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.10 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.10 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 30 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-24.04 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.04 amd64 avx:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 400 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v2
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.04 amd64 avx512 TRACE:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 400 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
    CXXFLAGS: -D SRSRAN_L2_TRACE -D SRSRAN_L1_TRACE -D SRSRAN_L2_LATE_TRACE -D SRSRAN_OFH_TRACE -D SRSRAN_UP_TRACE
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.04 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 60 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations
      - <<: *basic_combinations
        ENABLE_FFTW: "False"
        ENABLE_ARMPL: "True"

ubuntu-22.04 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: amd64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-22.04 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-22.04 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

ubuntu-22.04 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 120 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64
  parallel:
    matrix:
      - <<: *basic_combinations

rhel-8 amd64 native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: amd64
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "50G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "50G"    
  parallel:
    matrix:
      - <<: *basic_combinations

rhel-8 amd64 avx512:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  variables:
    OS: rhel-8
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "50G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "50G"    
  parallel:
    matrix:
      - <<: *basic_combinations

rhel-8 arm native:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  variables:
    OS: rhel-8
    INFRASTRUCTURE_TAG: arm64
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "50G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "50G"    
  parallel:
    matrix:
      - <<: *basic_combinations

rhel-8 arm neon:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 150 minutes
  interruptible: false
  variables:
    OS: rhel-8
    MARCH: armv8.2-a+crypto+fp16+dotprod
    INFRASTRUCTURE_TAG: arm64
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "50G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "50G"    
  parallel:
    matrix:
      - <<: *basic_combinations

# DPDK

.dpdk_combinations: &basic_combinations_dpdk
  <<: *basic_combinations
  ENABLE_UHD: "False"
  ENABLE_ZEROMQ: "False"
  ENABLE_DPDK: "True"
  COMPILER: [gcc, clang]

ubuntu-22.04 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 210 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx2", "23.11.1_avx2", "24.11.1_avx2"]

ubuntu-22.04 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 240 minutes
  interruptible: false
  variables:
    OS: ubuntu-22.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: ["22.11.6_avx512", "23.11.1_avx512", "24.11.1_avx512"]

ubuntu-24.04 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 270 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx2"
      - <<: *basic_combinations
        DPDK_VERSION: "23.11.1_avx2"
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx2"
      - <<: *basic_combinations
        DPDK_VERSION: "24.11.1_avx2"
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.04 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 320 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx512"
      - <<: *basic_combinations
        DPDK_VERSION: "23.11.1_avx512"
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx512"
      - <<: *basic_combinations
        DPDK_VERSION: "24.11.1_avx512"
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"

ubuntu-24.10 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 360 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx2"
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx2"

ubuntu-24.10 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 360 minutes
  interruptible: false
  variables:
    OS: ubuntu-24.10
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "23.11.1_avx512"
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx512"

ubuntu-25.04 amd64 avx2 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 460 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx2"

ubuntu-25.04 amd64 avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: delayed
      start_in: 460 minutes
  interruptible: false
  variables:
    OS: ubuntu-25.04
    MARCH: x86-64-v4
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  parallel:
    matrix:
      - <<: *basic_combinations_dpdk
        DPDK_VERSION: "24.11.1_avx512"

###############
# E2E Nightly #
###############
basic package:
  extends: .deb-package
  tags:
    - ${INFRASTRUCTURE_TAG}
  stage: build and unit tests
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
  retry: 2
  interruptible: false
  variables:
    <<: *package_variables
    OS_VERSION: "24.04"
    INFRASTRUCTURE_TAG: amd64-avx2
  needs: []

basic relwithdeb:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: srscu srsdu gnb
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: RelWithDebInfo
    ASSERT_LEVEL: PARANOID
    TEST_MODE: none
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic tsan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb
    OS: ubuntu-24.04
    COMPILER: clang
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_TSAN: "True"
    TEST_MODE: none
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
    BUILD_ARGS: -DEXIT_TIMEOUT=120
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic asan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb
    OS: ubuntu-24.04
    COMPILER: clang
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    ENABLE_ASAN: "True"
    TEST_MODE: none
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
    BUILD_ARGS: -DEXIT_TIMEOUT=120
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic memcheck:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Debug
    ASSERT_LEVEL: PARANOID
    TEST_MODE: none
    MARCH: x86-64-v3
    INFRASTRUCTURE_TAG: amd64-avx2
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic ru dummy:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    TEST_MODE: none
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    DPDK_VERSION: "23.11.1_avx512"
    MARCH: x86-64-v4
    FORCE_DEBUG_INFO: "True"
    ASSERT_LEVEL: AUTO
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic avx2 dpdk rtsan:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb_split_7_2
    OS: ubuntu-24.04-rtsan
    COMPILER: clang
    CMAKE_BUILD_TYPE: Release
    TEST_MODE: none
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    ENABLE_RTSAN: "True"
    ENABLE_WERROR: "False"
    DPDK_VERSION: "23.11.1_avx2"
    MARCH: x86-64-v3
    FORCE_DEBUG_INFO: "True"
    ASSERT_LEVEL: AUTO
    INFRASTRUCTURE_TAG: amd64-avx2
    BUILD_ARGS: -DEXIT_TIMEOUT=30
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic avx512 dpdk:
  extends: .build_and_unit
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
    - if: $CI_DESCRIPTION =~ /Weekly/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  retry: 2
  interruptible: false
  variables:
    SRS_TARGET: gnb_split_7_2
    OS: ubuntu-24.04
    COMPILER: gcc
    CMAKE_BUILD_TYPE: Release
    TEST_MODE: none
    ENABLE_UHD: "False"
    ENABLE_ZEROMQ: "False"
    ENABLE_DPDK: "True"
    DPDK_VERSION: "23.11.1_avx512"
    MARCH: x86-64-v4
    FORCE_DEBUG_INFO: "True"
    ASSERT_LEVEL: AUTO
    INFRASTRUCTURE_TAG: amd64-avx2-avx512
    BUILD_ARGS: -DEXIT_TIMEOUT=30
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 3 days

basic avx512 dpdk withassert:
  extends: basic avx512 dpdk
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  variables:
    ASSERT_LEVEL: PARANOID

basic avx512 dpdk rtsan:
  extends: basic avx512 dpdk
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests OpenSource/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests Plugin/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
    - if: $CI_DESCRIPTION =~ /Weekly/
      variables:
        ENABLE_FFTW: "False"
        ENABLE_MKL: "True"
  variables:
    OS: ubuntu-24.04-rtsan
    COMPILER: clang
    ENABLE_RTSAN: "True"
    ENABLE_WERROR: "False"

#######
# Web #
#######
custom build:
  extends: .build_and_unit
  rules:
    - if: $ON_WEB
    - if: $ON_API
  interruptible: false # Web jobs are standalone
  variables:
    ENABLE_ZEROMQ: ""
    INFRASTRUCTURE_TAG: ${INFRASTRUCTURE_TAG}
  after_script:
    - *build_after_script
  artifacts:
    <<: *build_artifacts
    expire_in: 4 hours
  cache:
    - *cache_build_get
