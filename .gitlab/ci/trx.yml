#
# Copyright 2013-2025 Software Radio Systems Limited
#
# By using this file, you agree to the terms and conditions set
# forth in the LICENSE file which can be found at the top level of
# the distribution.
#

include:
  - project: softwareradiosystems/ci/tools
    ref: "22"
    file: .gitlab/ci-shared/setup/all.yml
  - local: .gitlab/ci/build.yml

stages:
  - build and unit tests

build trx driver:
  extends: .build_and_unit
  variables:
    AMARISOFT_PACKAGE_REGISTRY: ${CI_API_V4_URL}/projects/44296988/packages/generic/amarisoft
    AMARISOFT_VERSION: "2023-09-08"
    KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
    KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
    KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
    KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
    KUBERNETES_EPHEMERAL_STORAGE_REQUEST: "20G"
    KUBERNETES_EPHEMERAL_STORAGE_LIMIT: "20G"
  timeout: 30 min
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $ON_MR
    - if: $ON_WEB
    - if: $ON_API
  retry: 2
  script:
    - |
      download_amarisoft() {
        . /etc/os-release

        if [[ "$ID" == "debian" || "$ID" == "ubuntu" ]]; then
          DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y --no-install-recommends curl apt-transport-https ca-certificates
        elif [[ "$ID" == "fedora" ]]; then
          dnf -y install curl
        fi

        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${AMARISOFT_PACKAGE_REGISTRY}/${AMARISOFT_VERSION}/amarisoft.${AMARISOFT_VERSION}.tar.gz" -o amarisoft.tar.gz)
        if [[ $http_code != "200" ]]; then
          exit 1
        fi
      }
    - |
      unpack_amarisoft() {
        cd ${CI_PROJECT_DIR}
        mkdir amarisoft
        tar -zxf amarisoft*.tar.gz -C amarisoft
        for file in amarisoft/*/trx_uhd*.tar.gz; do tar -zxf "$file" -C amarisoft/; done
        mv amarisoft/trx_uhd* amarisoft/trx_uhd-linux
      }
    - |
      build_srsran_trx() {
        export CC=/usr/bin/gcc
        export CXX=/usr/bin/g++

        cd ${CI_PROJECT_DIR}
        rm -Rf build 
        mkdir build
        cd build
        cmake -DBUILD_TESTING=False -DENABLE_TRX_DRIVER=True -DTRX_DRIVER_DIR=${CI_PROJECT_DIR}/amarisoft/trx_uhd-linux -DENABLE_EXPORT=True -DENABLE_UHD=False -DENABLE_ZEROMQ=True -DMARCH=x86-64-v3 ..
        make -j${KUBERNETES_CPU_REQUEST} trx_srsran_test
      }
    - |
      test_srsran_trx() {
        cd ${CI_PROJECT_DIR}/build
        ctest -R trx_srsran_test
      }
    - download_amarisoft
    - unpack_amarisoft
    - build_srsran_trx
    - test_srsran_trx
    - ls -lah ${CI_PROJECT_DIR}/build/utils/trx_srsran/libtrx_srsran.so
    - |
      mkdir ${CI_PROJECT_DIR}/build_trx_srsran
      mv ${CI_PROJECT_DIR}/build/utils/trx_srsran/libtrx_srsran.so ${CI_PROJECT_DIR}/build_trx_srsran/
  after_script: []
  artifacts: &trx_artifacts
    paths:
      - build_trx_srsran/libtrx_srsran.so
    expire_in: 4 hours

build amariue zmq driver:
  extends: build trx driver
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  artifacts:
    <<: *trx_artifacts
    expire_in: 3 days

build uesim zmq driver:
  extends: build trx driver
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  variables:
    OS: fedora-39
    AMARISOFT_VERSION: "2024-03-15"
  artifacts:
    <<: *trx_artifacts
    expire_in: 3 days

build amariue ntn zmq driver:
  extends: build trx driver
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
  variables:
    AMARISOFT_VERSION: "2024-12-13"
  artifacts:
    <<: *trx_artifacts
    expire_in: 3 days
