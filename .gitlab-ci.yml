#
# Copyright 2021-2025 Software Radio Systems Limited
#
# This file is part of srsRAN
#
# srsRAN is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# srsRAN is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# A copy of the GNU Affero General Public License can be found in
# the LICENSE file in the top-level directory of this distribution
# and at http://www.gnu.org/licenses/.
#

# How to test nighlt/weekly schedules
# Generate a schedule for your branch whit a CI_DESCRIPTION variable
# that contains "Nightly"/"Weekly" and an extra word
# Ex: "Test Weekly", "Nighlty add feature"

include:
  - project: softwareradiosystems/ci/tools
    ref: "22"
    file: .gitlab/ci-shared/setup/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "22"
    file: .gitlab/ci-shared/features/all.yml
  - project: softwareradiosystems/ci/tools
    ref: "22"
    file: .gitlab/ci-shared/tools/python.yml
  - project: softwareradiosystems/ci/tools
    ref: "22"
    file: .gitlab/ci-shared/tools/tagger.yml
  - local: .gitlab/ci/builders/version.yml
  - local: .gitlab/ci/build.yml
  - local: .gitlab/ci/trx.yml
  - local: .gitlab/ci/e2e.yml
  - local: .gitlab/ci/release.yml

stages:
  - ci
  - static
  - build and unit tests
  - zmq
  - test mode
  - rf
  - manual
  - documentation
  # release
  - pre private
  - private
  - post private
  - public
  - post public
  - release
  - post release

variables:
  SLACK_CHANNEL_OK: "#ci_gnb"
  SLACK_CHANNEL_FAIL: "#ci_gnb"
  SLACK_CHANNEL_INFO_MSG: "#ci_gnb_verbose"
  AUTOREBASER_PRS_IN_QUEUE: 1

################################################################################
## CI MR
################################################################################

.blocked MRs:
  image: alpine/curl:8.12.1
  retry: 2
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  before_script:
    - apk add --no-cache jq
    - |
      REPO_PLUGIN_COMMIT_SHA=$(cat .gitlab/ci/plugin_version.txt)
    - |
      MR_JSON=$(
        curl -s -H "PRIVATE-TOKEN: $CODEBOT_TOKEN" \
          "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/merge_requests/${CI_MERGE_REQUEST_IID}/blockees?state=opened" | \
        jq --argjson PLUGIN_PROJECT_ID "$PLUGIN_PROJECT_ID" -r '
          .[] 
          | select(.blocked_merge_request.project_id == $PLUGIN_PROJECT_ID) 
          | select(.blocked_merge_request.target_branch == "main") 
          | .blocked_merge_request'
      )
      echo $MR_JSON | jq
    - |
      if test $(echo $MR_JSON | jq '.id' | wc -l) -gt 1; then
        echo "Found multiple plugin MRs blocked by this one! Only 1 is allowed"
        exit 1
      fi

get plugin commit:
  extends: .blocked MRs
  stage: ci
  rules:
    - if: $CI_DISABLE_PLUGINS
      when: never
    - if: $ON_MR
    - if: $ON_WEB
    - if: $ON_API
    - if: $ON_TAG
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
    - if: $CI_DESCRIPTION =~ /Weekly/
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
  script:
    - |
      CI_PLUGIN_COMMIT_SHA=$(echo $MR_JSON | jq -r '.sha')
      if [[ -z $CI_PLUGIN_COMMIT_SHA ]]; then
        CI_PLUGIN_COMMIT_SHA=$REPO_PLUGIN_COMMIT_SHA
      fi
    - echo "CI_PLUGIN_COMMIT_SHA=$CI_PLUGIN_COMMIT_SHA" >> info.env
    - cat info.env
  artifacts:
    reports:
      dotenv: info.env
  needs: []

validate blocked MRs:
  extends: .blocked MRs
  stage: .post
  rules:
    - if: $ON_MR
  script:
    # Validate the last pipeline is green
    - |
      CI_PLUGIN_MERGE_REQUEST_IID=$(echo $MR_JSON | jq -r '.iid')
      PLUGIN_PROJECT_ID=$(echo $MR_JSON | jq -r '.project_id')
    - |
      if [[ -z $CI_PLUGIN_MERGE_REQUEST_IID ]]; then
        LATEST_PIPELINE_STATUS="success"
      else
        LATEST_PIPELINE_STATUS=$(
          curl -s -H "PRIVATE-TOKEN: $CODEBOT_TOKEN" \
            "${CI_API_V4_URL}/projects/${PLUGIN_PROJECT_ID}/merge_requests/${CI_PLUGIN_MERGE_REQUEST_IID}/pipelines" | \
          jq -r '
            [.[] | select(.source == "merge_request_event")]
            | first
            | .status'
        )
      fi
    - test "$LATEST_PIPELINE_STATUS" = "success"
    # Validate the plugin commit is the same as the one in the MR
    - |
      TO_VALIDATE_PLUGIN_COMMIT_SHA=$(
        echo $MR_JSON | jq -r '
          select(.draft==false) 
          | select(.work_in_progress==false) 
          | select(.merge_when_pipeline_succeeds==true) 
          | select(.has_conflicts==false) 
          | select(.blocking_discussions_resolved==true) 
          | select(.detailed_merge_status=="merge_request_blocked") 
          | .sha'
      )
      if [[ -z $TO_VALIDATE_PLUGIN_COMMIT_SHA ]]; then
        TO_VALIDATE_PLUGIN_COMMIT_SHA=$REPO_PLUGIN_COMMIT_SHA
      fi
    - test "$TO_VALIDATE_PLUGIN_COMMIT_SHA" = "$CI_PLUGIN_COMMIT_SHA"
  dependencies:
    - get plugin commit

trigger builder:
  stage: ci
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-builder/
      when: never
    - if: $ON_MR
      changes:
        paths:
          - .gitlab/ci/builders.yml
          - .gitlab/ci/builders/**/*
          - docker/scripts/**/*
  trigger:
    include: .gitlab/ci/builders.yml
    strategy: depend

trigger docker:
  stage: ci
  rules:
    - if: $CI_MERGE_REQUEST_LABELS =~ /ci-no-docker/
      when: never
    - if: $ON_MR
      changes:
        paths:
          - .gitlab/ci/docker.yml
          - docker/**/*.{yml,env,json,toml,py,sh,csv,py,toml}
          - docker/**/Dockerfile
          - .gdbinit
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      variables:
        CI_DESCRIPTION: $CI_DESCRIPTION
    - if: $CI_DESCRIPTION =~ /Weekly/
      variables:
        CI_DESCRIPTION: $CI_DESCRIPTION
  trigger:
    include: .gitlab/ci/docker.yml
    strategy: depend
  variables:
    PY_DIR: docker/metrics_server

################################################################################
## CI Scheduled pipelines
################################################################################

job cleaner:
  extends: .job cleaner
  timeout: 4h
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/

pr reminder:
  extends: .pr reminder
  rules:
    - if: $NOTIFY_SLACK != "true"
      when: never
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/

matlab nightly:
  stage: ci
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      variables:
        ON_SCHEDULE: "true"
        CI_DESCRIPTION: Nightly
        SRSRAN_COMMIT: $CI_COMMIT_SHA
        NOTIFY_SLACK: "true"
  inherit:
    variables: false
  trigger:
    project: softwareradiosystems/srsgnb_matlab
    branch: master

matlab weekly:
  stage: ci
  rules:
    - if: $CI_DESCRIPTION =~ /Weekly/
      variables:
        ON_SCHEDULE: "true"
        CI_DESCRIPTION: Weekly
        SRSRAN_COMMIT: $CI_COMMIT_SHA
        NOTIFY_SLACK: "true"
  inherit:
    variables: false
  trigger:
    project: softwareradiosystems/srsgnb_matlab
    branch: master

generate nightly plugin:
  stage: ci
  image: ubuntu:24.04
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
  variables:
    GIT_STRATEGY: none
  script:
    - |
      echo """
      include:
        - project: softwareradiosystems/ci/tools
          ref: \"21\"
          file: .gitlab/ci-shared/setup/all.yml

      stages:
        - trigger
      """ >> trigger_nightly_plugins.yml

      while IFS='|' read -r PLUGIN_PATH PLUGIN_REPO PLUGIN_REF; do
          echo """
      ${PLUGIN_PATH} nightly:
        stage: trigger
        interruptible: false
        variables:
          ON_SCHEDULE: "true"
          CI_DESCRIPTION: Nightly
          NOTIFY_SLACK: "false"
        trigger:
          project: ${PLUGIN_REPO}
          branch: main
          strategy: depend
      """ >> trigger_nightly_plugins.yml
      done < <(grep -v '^#' "$PLUGINS_DATA_FILE")
    - cat trigger_nightly_plugins.yml
  artifacts:
    paths:
      - trigger_nightly_plugins.yml
    expire_in: 1 day

plugin nightly:
  stage: ci
  interruptible: false
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
  inherit:
    variables: false
  trigger:
    include:
      - artifact: trigger_nightly_plugins.yml
        job: generate nightly plugin
    strategy: depend
  needs:
    - job: generate nightly plugin
      artifacts: true

################################################################################
## Static
################################################################################
headers:
  image: ubuntu
  stage: static
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  rules:
    - if: $ON_MR
      exists:
        - "**/CMakeLists.txt"
        - "**/Dockerfile"
        - "**/*.cmake"
        - "**/*.yml"
        - "**/*.sh"
  script:
    - .gitlab/ci/release/update_headers.sh
  needs: []

include-guards:
  extends: .include-guards
  parallel:
    matrix:
      - INPUT_PATH: "include/srsran"
        INPUT_IGNORE: "/bundled/"
      - INPUT_PATH: "."
        INPUT_IGNORE: "^\\(include\\|docs\\|external\\)/.*"

full-code-format:
  extends: .full-code-format
  rules:
    - if: $ON_MR
      changes:
        - .clang-format
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/

.codechecker:
  image: ${CR_REGISTRY_URI}/srsgnb/codechecker:${DOCKER_BUILDER_VERSION}
  stage: static
  tags:
    - amd64
  needs:
    - job: builder version
      optional: false
      artifacts: true
    - job: trigger builder
      optional: true
      artifacts: false
    - job: get plugin commit
      optional: true
      artifacts: true
  variables:
    ANALYZER: ""
    ANALYZER_ARGS: ""
    ARTIFACT_EXTRA_PATH: ""
    KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
    KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
    KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
    KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
    CHECK_PER_FILE_TIMEOUT: 600
    GIT_LFS_SKIP_SMUDGE: 1
  before_script:
    - |
      echo "
      -/usr/lib
      -*tests/unittests
      -*tests/integrationtests
      -*tests/benchmarks
      -*benchmarks
      -*apps/examples
      -*external
      -*lib/asn1
      -*lib/phy/generic_functions/fftx/lib_fftx_dftbat_srcs
      -*lib/phy/generic_functions/fftx/lib_fftx_idftbat_srcs" >/tmp/codechecker_skip
    - |
      export CC=/usr/bin/clang
      export CXX=/usr/bin/clang++
      mkdir -p build
      cd build || exit
      cmake -DASSERT_LEVEL=PARANOID -DMARCH=x86-64-v3 -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_TESTING=False ..
      make srsran_versioning # needed to generate hashes.h
    - |
      monitor_child_process() {
          while true; do
              ps -eo comm,pid,etimes | grep ${ANALYZER} | while read comm pid etimes; do
                  if [ $etimes -gt $CHECK_PER_FILE_TIMEOUT ]; then
                      echo "Killing child analysis process"
                      kill $pid
                  fi
              done
              sleep 30
          done
      }
      export -f monitor_child_process
  script:
    - nohup bash -c monitor_child_process &
    - static-analyzer.sh -i /tmp/codechecker_skip --jobs ${KUBERNETES_CPU_REQUEST} --analyzers ${ANALYZER} ${ANALYZER_ARGS} $CI_PROJECT_DIR
  after_script:
    - mv codechecker_html codechecker-${ANALYZER}-html
  artifacts: &codechecker_artifacts
    reports:
      codequality: code-quality-report.json
    paths:
      - codechecker-${ANALYZER}-html${ARTIFACT_EXTRA_PATH}
    when: always
    expire_in: 10 minutes

clang-tidy:
  extends: .codechecker
  stage: manual
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_APPROVED == "true"
    - if: $ON_MR
      when: manual
      allow_failure: false
  variables:
    ANALYZER: clang-tidy
    ANALYZER_ARGS: --analyzer-config clang-tidy:take-config-from-directory=true --tidy-config .clang-tidy
    ARTIFACT_EXTRA_PATH: "/index.html"

cppcheck:
  extends: .codechecker
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
  interruptible: false
  timeout: 2 hours
  retry: 2
  variables:
    ANALYZER: cppcheck
    ANALYZER_ARGS: --cppcheck-max-template-recursion 5
  artifacts:
    <<: *codechecker_artifacts
    expire_in: 1 day

clangsa:
  extends: .codechecker
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: manual
      allow_failure: true
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: manual
      allow_failure: true
  interruptible: false
  variables:
    ANALYZER: clangsa
    ANALYZER_ARGS: --ctu
  timeout: 8 hours

# .coverity_base:
#   image: $CR_REGISTRY_URI/coverity_image/2022.6.0:1.0.0
#   stage: static
#   needs: []
#   variables:
#     KUBERNETES_CPU_REQUEST: ${SRS_CPU_LIMIT}
#     KUBERNETES_CPU_LIMIT: ${SRS_CPU_LIMIT}
#     KUBERNETES_MEMORY_REQUEST: ${SRS_MEMORY_LIMIT}
#     KUBERNETES_MEMORY_LIMIT: ${SRS_MEMORY_LIMIT}
#   tags:
#     - amd64
#   interruptible: false
#   timeout: 2 hours
#   script:
#     - |
#       mkdir -p build
#       cd build
#       cmake ..
#       cov-build --dir cov-int make -j${KUBERNETES_CPU_REQUEST}
#       tar czvf srsgnb.tgz cov-int
#       ver=$(git rev-parse HEAD)
#     - |
#       curl --form token=$COV_TOKEN \
#         --form email=${COVERITY_EMAIL} \
#         --form file=@srsgnb.tgz \
#         --form version=$ver \
#         --form description="${DESCRIPTION}" \
#         https://scan.coverity.com/builds?project=${PROJECT_NAME}

# coverity-dev:
#   extends: .coverity_base
#   rules:
#     - if: $CI_DESCRIPTION =~ /Weekly/
#   before_script:
#     - export PROJECT_NAME="srsRAN_5G"
#     - export DESCRIPTION="srsRAN Project dev build"
#     - export COV_TOKEN="${COVERITY_TOKEN_DEV}"

e2e tests tox:
  stage: static
  rules:
    - if: $ON_MR
      changes:
        - tests/e2e/**/*
  variables:
    PY_DIR: tests/e2e
  before_script:
    - apk add build-base
  extends: .tox

################################################################################
## Build + Unit Tests + Integration tests
################################################################################

# In build.yml

################################################################################
# Doc generation
################################################################################
unit coverage:
  stage: documentation
  image:
    name: ${GITLAB_REGISTRY_URI}/${CI_TOOLS_REPO}/report-generator:5.1.26
    entrypoint: ["/bin/sh", "-c"]
  rules:
    - if: $ON_MR == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_PROTECTED == "true" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME != $CI_DEFAULT_BRANCH
      when: never
    - if: $ON_MR
      variables:
        coverage_report: summary
      when: always # Even if previous stages/required jobs fail
  variables:
    GIT_LFS_SKIP_SMUDGE: 1
  before_script:
    - PACKAGE_URL=${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/coverage/${CI_COMMIT_BRANCH}${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}/coverage_history.tar.gz
    # Download coverage history from the registry
    - |
      download_from_registry() {
        apk add curl
        
        cd ${CI_PROJECT_DIR}
        http_code=$(curl -w "%{http_code}" --header "PRIVATE-TOKEN: $CODEBOT_TOKEN" "${PACKAGE_URL}" -o output.tar.gz)
        if [[ $http_code == "200" ]]; then
          tar -xf output.tar.gz
        fi
      }
    # Publish coverage history folder to the registry
    - |
      publish_to_registry() {
        cd ${CI_PROJECT_DIR}
        tar -czf coverage_history.tar.gz coverage_history
        curl --fail --header "JOB-TOKEN: $CI_JOB_TOKEN" --upload-file coverage_history.tar.gz "${PACKAGE_URL}"
      }
  script:
    - |
      if [[ $coverage_report = "full" ]]; then
        download_from_registry
        HTML_TYPE=Html
        HISTORY=-historydir:coverage_history
      else
        HTML_TYPE=HtmlSummary
        HISTORY=
      fi
    - |
      ReportGenerator -reports:*coverage.xml -targetdir:coverage_html ${HISTORY} \
        -title:${CI_PROJECT_NAME} -tag:${CI_COMMIT_SHA} \
        -reporttypes:"${HTML_TYPE};TextSummary"
    - cat coverage_html/Summary.txt
    - coverage_value=$(cat coverage_html/Summary.txt | sed -n 's/^\s*Line coverage:\s*\(.*\)\%/\1/p')
    - |
      if [[ $coverage_report = "full" ]]; then
        publish_to_registry
      fi
    - |
      export metric_prefix=""
      if [[ $ON_MR == "true" ]]; then metric_prefix="_pr"; fi
      echo "coverage${metric_prefix},pipeline=${CI_PIPELINE_ID},os=${OS} value=${coverage_value}" >> build/build_time_metrics.txt
    - |
      influx write --host $INFLUXDB_URL --token $INFLUXDB_TOKEN --org $INFLUXDB_ORG \
        --bucket ci --file build/build_time_metrics.txt || true
  coverage: /^\s*Line coverage:\s*\d+.\d+\%/
  artifacts: &unit_coverage_artifacts
    paths:
      - coverage_html
    expire_in: 10 minutes
  retry: 2
  needs:
    - job: intermediate commits cached
      optional: true
      artifacts: true
    - job: intermediate commits clean
      optional: true
      artifacts: true
    - job: smoke release update cache
      optional: true
      artifacts: true

unit coverage dev:
  extends: unit coverage
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      variables:
        coverage_report: full
      when: always # Even if previous stages/required jobs fail
  artifacts:
    <<: *unit_coverage_artifacts
    expire_in: 1 day

pages:
  stage: documentation
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: always # Even if previous stages/required jobs fail
      allow_failure: true
  image: ${GITLAB_REGISTRY_URI}/${CI_TOOLS_REPO}/doxygen:1.9.8-1.2023.7
  script:
    - mkdir public
    - mv coverage_html public/
    - mv codechecker*html public/
    - mv docs/index.html public/index.html
    - docker/scripts/install_dependencies.sh
    - apt-get update && apt-get install -y --no-install-recommends rsync
    - |
      rm -Rf build
      mkdir build
      cd build || exit
      cmake ..
      make -j $(nproc) doxygen
      cd ..
    - mkdir public/doxygen
    - rsync -a build/docs/html/ public/doxygen/
    - |
      # Remove bigger file if size is bigger than 900MB
      while [ $(du -s public | awk '{print $1}') -gt 921600 ]; do
        file_to_remove=$(find public -type f ! -name "*.html" ! -name "*.js" -exec ls -l {} + | sort -k5 -n -r | awk 'NR==1' | awk '{print $NF}')
        file_size=$(du -h "$file_to_remove" | awk '{print $1}')
        echo "Removing file: $file_to_remove (Size: $file_size)"
        rm -f "$file_to_remove"
      done
  after_script:
    - |
      if [ $CI_JOB_STATUS = "failed" ]; then
        mkdir -p public
        mv docs/fail.html public/index.html
      fi
    - mv docs/*.png public/
    - sed -i 's/commit_hash/'$CI_COMMIT_SHA'/' public/index.html
  needs:
    - job: unit coverage dev
      artifacts: true
    - job: cppcheck
      artifacts: true
  artifacts:
    paths:
      - public
    expire_in: 10 minutes

################################################################################
# Release dryrun
################################################################################
update agpl main dryrun:
  extends: update private branch
  stage: .post
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: always
  variables:
    PRIVATE_BRANCH: agpl_main
    HEADERS: "true"
    MODE: "dryrun"
  needs: []

create-tags:
  extends: .create-tag
  stage: .post
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests Plugin/
      when: delayed
      start_in: 3 hours
  script:
    - |
      for name in $TAG_NAME_ARRAY; do
        create_tag "${name}_$(date -u +"%Y.%m.%d")"
      done
  needs: []
  retry: 2

################################################################################
# Enable / Disable pipelines
################################################################################
scheduler:
  # Override default scheduler job
  # Enabling branches on default_branch will also apply any change done
  stage: ci
  extends: .enable-schedule-by-branch
  rules:
    - if: $ON_DEFAULT_BRANCH
  variables:
    ENABLE: "true"
    BRANCH: $CI_COMMIT_BRANCH
  dependencies: []

disable current schedule:
  stage: .post
  extends: .enable-schedule-by-description
  rules:
    - if: $CI_DESCRIPTION =~ /Nightly Build Unit Tests/
      when: always
    - if: $CI_DESCRIPTION =~ /Nightly E2E Tests/
      when: always
    - if: $CI_DESCRIPTION =~ /Alternative OSs/
      when: always
    - if: $CI_DESCRIPTION =~ /Weekly/
      when: always
  interruptible: false
  variables:
    ENABLE: "false"
    BRANCH: $CI_COMMIT_REF_NAME
    DESCRIPTION: $CI_DESCRIPTION
  dependencies: []
